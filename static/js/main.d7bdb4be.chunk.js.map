{"version":3,"sources":["actions/types.js","reducers/todoReducer.js","reducers/tagReducer.js","reducers/colorReducer.js","reducers/index.js","components/atoms/Label/index.js","components/atoms/TextField/index.js","components/atoms/Button/index.js","components/atoms/IconButton/index.js","components/atoms/Tag/index.js","components/molecules/Modal/index.js","actions/index.js","components/organisms/TodoList/index.js","components/App.js","index.js"],"names":["ADD_TODO","REMOVE_TODO","EDIT_TODO","EDIT_TODO_DONE","ADD_TAG","REMOVE_TAG","EDIT_TAG","INITIAL_STATE","done","content","tagIndex","todoReducer","state","action","type","payload","filter","todoItem","index","map","name","color","tagReducer","tagItem","colorReducer","reducers","combineReducers","todoList","tagList","colorList","Label","text","className","TextField","upperCase","onTextChange","value","onChange","e","target","toUpperCase","Button","onBtnClick","onClick","IconButton","connect","onTagClick","styleSetting","style","addTodo","removeTodo","editTodo","addTag","removeTag","editTag","modalSetting","onModalShow","initialType","initialAction","initialContent","selectedTodoIndex","initialTagIndex","initialColorIndex","useState","modalType","setModalType","tagAction","setTagAction","setContent","tagContent","setTagContent","selectedTagIndex","setSelectedTagIndex","selectedColorIndex","setSelectedColorIndex","tagListInTodoModal","border","marginBottom","backgroundColor","boxShadow","indexOf","copyTagList","push","tagListInTagModal","length","colorListInTagModal","colorItem","colorIndex","dialogOfTodo","alert","dialogOfTag","ref","useRef","contains","current","editTodoDone","date","Date","formatDate","getMonth","getDate","getFullYear","setModalSetting","showModal","setShowModal","renderedList","todoIndex","renderedTag","includes","textDecoration","App","ReactDOM","render","store","createStore","document","querySelector"],"mappings":"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","file":"static/js/main.d7bdb4be.chunk.js","sourcesContent":["export const ADD_TODO = 'ADD_TODO';\nexport const REMOVE_TODO = 'REMOVE_TODO';\nexport const EDIT_TODO = 'EDIT_TODO';\nexport const EDIT_TODO_DONE = 'EDIT_TODO_DONE';\nexport const ADD_TAG = 'ADD_TAG';\nexport const REMOVE_TAG = 'REMOVE_TAG';\nexport const EDIT_TAG = 'EDIT_TAG';","import {\n    ADD_TODO,\n    REMOVE_TODO,\n    EDIT_TODO,\n    EDIT_TODO_DONE,\n} from '../actions/types';\n\nconst INITIAL_STATE = [\n    {\n        done: false,\n        content: '練習 React',\n        tagIndex: 0,\n    },\n    {\n        done: false,\n        content: '練習 Redux',\n        tagIndex: 1,\n    },\n];\n\nconst todoReducer = (state = INITIAL_STATE, action) => {\n    switch (action.type) {\n        case ADD_TODO:\n            return [\n                ...state,\n                {\n                    done: false,\n                    content: action.payload.content,\n                    tagIndex: action.payload.tagIndex,\n                },\n            ];\n        case REMOVE_TODO:\n            return state.filter((todoItem, index) => index !== action.payload.index);\n        case EDIT_TODO:\n            return state.map((todoItem, index) => index === action.payload.index\n                ? {\n                    ...todoItem,\n                    content: action.payload.content,\n                    tagIndex: action.payload.tagIndex,\n                }\n                : { ...todoItem }\n            );\n        case EDIT_TODO_DONE:\n            return state.map((todoItem, index) => index === action.payload.index\n                ? {\n                    ...todoItem,\n                    done: !todoItem.done,\n                }\n                : { ...todoItem }\n            );\n        default:\n            return state;\n    }\n};\n\nexport default todoReducer;","import {\n    ADD_TAG,\n    REMOVE_TAG,\n    EDIT_TAG,\n} from '../actions/types';\n\nconst INITIAL_STATE = [\n    {\n        name: 'NEW',\n        color: '#F4929E',\n    },\n    {\n        name: 'IMPORTANT',\n        color: '#8585C1',\n    },\n];\n\nconst tagReducer = (state = INITIAL_STATE, action) => {\n    switch (action.type) {\n        case ADD_TAG:\n            return [\n                ...state,\n                {\n                    name: action.payload.name,\n                    color: action.payload.color,\n                },\n            ];\n        case REMOVE_TAG:\n            return state.filter((tagItem, tagIndex) => tagIndex !== action.payload.index);\n        case EDIT_TAG:\n            return state.map((tagItem, tagIndex) => tagIndex === action.payload.index\n                ? {\n                    name: action.payload.name,\n                    color: action.payload.color,\n                }\n                : { ...tagItem }\n            );\n        default:\n            return state;\n    }\n};\n\nexport default tagReducer;","const INITIAL_STATE = [\n    '#F4929E',\n    '#8585C1',\n    '#504CA5',\n    '#BD2D41',\n    '#797979',\n    '#63CC89',\n    '#6FCDE1',\n    '#F6C745',\n    '#EA5C56',\n    '#E2D5E4',\n];\n\nconst colorReducer = (state = INITIAL_STATE, action) => {\n    return state;\n};\n\nexport default colorReducer;","import { combineReducers } from 'redux';\nimport todoReducer from './todoReducer';\nimport tagReducer from './tagReducer';\nimport colorReducer from './colorReducer';\n\nconst reducers = combineReducers({\n    todoList: todoReducer,\n    tagList: tagReducer,\n    colorList: colorReducer,\n});\n\nexport default reducers;","import React from 'react';\nimport './index.css';\n\nconst Label = ({ text }) => {\n\treturn <label className=\"label\">{text}</label>;\n};\n\nexport default Label;\n","import React from 'react';\nimport './index.css';\n\nconst TextField = ({ upperCase, text, onTextChange }) => {\n\treturn (\n\t\t<input\n\t\t\ttype=\"text\"\n\t\t\tclassName=\"textField\"\n\t\t\tvalue={text}\n\t\t\tonChange={e => onTextChange(upperCase ? e.target.value.toUpperCase() : e.target.value)}\n\t\t/>\n\t);\n};\n\nexport default TextField;\n","import React from 'react';\nimport './index.css';\n\nconst Button = ({ type, text, onBtnClick }) => {\n\treturn (\n\t\t<button\n\t\t\ttype=\"button\"\n\t\t\tclassName={`btn btn-${type}`}\n\t\t\tonClick={onBtnClick}\n\t\t>\n\t\t\t{text}\n\t\t</button>\n\t);\n};\n\nexport default Button;\n","import React from 'react';\nimport './index.css';\n\nconst IconButton = ({ text, onBtnClick }) => {\n\treturn (\n\t\t<button\n\t\t\ttype=\"button\"\n\t\t\tclassName={`material-icons iconBtn-${text}`}\n\t\t\tonClick={onBtnClick}\n\t\t>\n\t\t\t{text}\n\t\t</button>\n\t);\n};\n\nexport default IconButton;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport './index.css';\n\nconst Tag = ({ type, index, text, onTagClick, styleSetting }) => {\n\treturn (\n\t\t<span\n\t\t\tclassName={type === 'circle' ? `circle material-icons` : 'tag'}\n\t\t\tonClick={() => onTagClick(index)}\n\t\t\tstyle={styleSetting}\n\t\t>\n\t\t\t{text}\n\t\t</span>\n\t);\n};\n\nconst mapStateToProps = state => {\n\treturn { tagList: state.tagList };\n};\n\nexport default connect(mapStateToProps)(Tag);\n","import React, { useState, useRef } from 'react';\nimport { connect } from 'react-redux';\nimport {\n\taddTodo,\n\tremoveTodo,\n\teditTodo,\n\taddTag,\n\tremoveTag,\n\teditTag,\n} from '../../../actions';\nimport Label from '../../atoms/Label';\nimport TextField from '../../atoms/TextField';\nimport Button from '../../atoms/Button';\nimport IconButton from '../../atoms/IconButton';\nimport Tag from '../../atoms/Tag';\nimport './index.css';\n\nconst Modal = ({\n\tmodalSetting,\n\tonModalShow,\n\ttagList,\n\tcolorList,\n\taddTodo,\n\tremoveTodo,\n\teditTodo,\n\taddTag,\n\tremoveTag,\n\teditTag,\n}) => {\n\tconst {\n\t\tinitialType,\n\t\tinitialAction,\n\t\tinitialContent,\n\t\tselectedTodoIndex,\n\t\tinitialTagIndex,\n\t\tinitialColorIndex,\n\t} = modalSetting;\n\n\t// Decide which type of modal should be showed, including TodoModal(TODO) and TagModal(TAG)\n\tconst [modalType, setModalType] = useState(initialType);\n\n\t// Decide which type of button should be showed in Todo Modal, including AddBtn(ADD_TODO) and (SaveBtn and RemoveBtn)(EDIT_TODO)\n\t// eslint-disable-next-line no-unused-vars\n\tconst [action, setAction] = useState(initialAction);\n\n\t// Decide which type of button should be showed in Tag Modal, including AddBtn(ADD_TAG) and (SaveBtn and RemoveBtn)(EDIT_TAG)\n\tconst [tagAction, setTagAction] = useState('');\n\n\t// Store the content in the Todo input element\n\tconst [content, setContent] = useState(initialContent);\n\n\t// Store the content in the Tag input element\n\tconst [tagContent, setTagContent] = useState(tagList[initialTagIndex] ? tagList[initialTagIndex].name : '');\n\n\t// Store the selected tag\n\tconst [selectedTagIndex, setSelectedTagIndex] = useState(initialTagIndex);\n\n\t// Store the selected color\n\tconst [selectedColorIndex, setSelectedColorIndex] = useState(initialColorIndex);\n\n\tconst tagListInTodoModal = tagList.map((tagItem, tagIndex) => {\n\t\tconst styleSetting =\n\t\t\ttagIndex === selectedTagIndex\n\t\t\t\t? {\n\t\t\t\t\tborder: `2px solid ${tagItem.color}`,\n\t\t\t\t\tmarginBottom: '10px',\n\t\t\t\t\tbackgroundColor: tagItem.color,\n\t\t\t\t\tboxShadow: '0 0 6px rgba(0, 0, 0, 0.24)',\n\t\t\t\t}\n\t\t\t\t: {\n\t\t\t\t\tborder: `2px solid ${tagItem.color}`,\n\t\t\t\t\tmarginBottom: '10px',\n\t\t\t\t\tbackgroundColor: 'transparent',\n\t\t\t\t\tcolor: tagItem.color,\n\t\t\t\t};\n\n\t\treturn tagItem.name ? (\n\t\t\t<Tag\n\t\t\t\tkey={tagIndex}\n\t\t\t\tindex={tagIndex}\n\t\t\t\ttext={tagItem.name}\n\t\t\t\tonTagClick={() => {\n\t\t\t\t\tsetSelectedTagIndex(tagIndex);\n\t\t\t\t\tsetSelectedColorIndex(colorList.indexOf(tagItem.color));\n\t\t\t\t}}\n\t\t\t\tstyleSetting={styleSetting}\n\t\t\t/>\n\t\t) : null;\n\t});\n\n\tconst copyTagList = tagList.map(tagItem => tagItem);\n\tcopyTagList.push({ name: '＋', color: '#A4A3F2' });\n\tconst tagListInTagModal = copyTagList.map((tagItem, tagIndex) => {\n\t\tconst styleSetting =\n\t\t\ttagIndex === selectedTagIndex\n\t\t\t\t? {\n\t\t\t\t\tborder: `2px solid ${tagItem.color}`,\n\t\t\t\t\tmarginBottom: '10px',\n\t\t\t\t\tbackgroundColor: tagItem.color,\n\t\t\t\t\tboxShadow: '0 0 6px rgba(0, 0, 0, 0.24)',\n\t\t\t\t}\n\t\t\t\t: {\n\t\t\t\t\tborder: `2px solid ${tagItem.color}`,\n\t\t\t\t\tmarginBottom: '10px',\n\t\t\t\t\tbackgroundColor: 'transparent',\n\t\t\t\t\tcolor: tagItem.color,\n\t\t\t\t};\n\n\t\tfunction normalTagFunc() {\n\t\t\tsetTagAction('EDIT_TAG');\n\t\t\tsetTagContent(tagItem.name);\n\t\t\tsetSelectedColorIndex(colorList.indexOf(tagItem.color));\n\t\t\tsetSelectedTagIndex(tagIndex);\n\t\t}\n\n\t\tfunction addTagFunc() {\n\t\t\tsetTagAction('ADD_TAG');\n\t\t\tsetTagContent('');\n\t\t\tsetSelectedColorIndex(colorList.length);\n\t\t\tsetSelectedTagIndex(tagIndex);\n\t\t}\n\n\t\treturn tagItem.name ? (\n\t\t\t<Tag\n\t\t\t\tkey={tagIndex}\n\t\t\t\tindex={tagIndex}\n\t\t\t\ttext={tagItem.name}\n\t\t\t\tonTagClick={tagIndex !== copyTagList.length - 1 ? normalTagFunc : addTagFunc}\n\t\t\t\tstyleSetting={styleSetting}\n\t\t\t/>\n\t\t) : null;\n\t});\n\n\tconst colorListInTagModal = colorList.map((colorItem, colorIndex) => {\n\t\tconst styleSetting =\n\t\t\tcolorIndex === selectedColorIndex\n\t\t\t\t? { backgroundColor: colorItem, color: '#FFFFFF' }\n\t\t\t\t: { backgroundColor: colorItem, color: colorItem };\n\n\t\treturn (\n\t\t\t<Tag\n\t\t\t\tkey={colorIndex}\n\t\t\t\ttype={'circle'}\n\t\t\t\tindex={colorIndex}\n\t\t\t\ttext={'done'}\n\t\t\t\tonTagClick={setSelectedColorIndex}\n\t\t\t\tstyleSetting={styleSetting}\n\t\t\t/>\n\t\t);\n\t});\n\n\tconst dialogOfTodo = (\n\t\t<div className=\"dialog\">\n\t\t\t<IconButton text={'cancel'} onBtnClick={() => onModalShow(false)} />\n\t\t\t<Label text={'Things to Do'} />\n\t\t\t<TextField upperCase={false} text={content} onTextChange={setContent} />\n\t\t\t<Label text={'Type of Things'} />\n\t\t\t<IconButton\n\t\t\t\ttext={'edit'}\n\t\t\t\tonBtnClick={() => {\n\t\t\t\t\tsetModalType('TAG');\n\t\t\t\t\tif (selectedTagIndex === tagList.length) {\n\t\t\t\t\t\tsetTagAction('ADD_TAG');\n\t\t\t\t\t\tsetTagContent('');\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsetTagAction('EDIT_TAG');\n\t\t\t\t\t\tsetTagContent(tagList[selectedTagIndex].name);\n\t\t\t\t\t}\n\t\t\t\t}}\n\t\t\t\t// eslint-disable-next-line react/jsx-no-duplicate-props\n\t\t\t\tonBtnClick={() => {\n\t\t\t\t\tsetModalType('TAG');\n\n\t\t\t\t\tif (selectedTagIndex === tagList.length) {\n\t\t\t\t\t\tsetTagAction('ADD_TAG');\n\t\t\t\t\t\tsetTagContent('');\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsetTagAction('EDIT_TAG');\n\t\t\t\t\t\tsetTagContent(tagList[selectedTagIndex].name);\n\t\t\t\t\t}\n\t\t\t\t}}\n\t\t\t/>\n\t\t\t<div className=\"tagList\">{tagListInTodoModal}</div>\n\t\t\t{action === 'EDIT_TODO' ? (\n\t\t\t\t<div className=\"btnGroup\">\n\t\t\t\t\t<Button\n\t\t\t\t\t\ttype={'remove'}\n\t\t\t\t\t\ttext={'REMOVE'}\n\t\t\t\t\t\tonBtnClick={() => {\n\t\t\t\t\t\t\tremoveTodo(selectedTodoIndex);\n\t\t\t\t\t\t\tonModalShow(false);\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>\n\t\t\t\t\t<Button\n\t\t\t\t\t\ttype={'save'}\n\t\t\t\t\t\ttext={'SAVE'}\n\t\t\t\t\t\tonBtnClick={() =>\n\t\t\t\t\t\t\tcontent\n\t\t\t\t\t\t\t\t? (editTodo(selectedTodoIndex, content, selectedTagIndex), onModalShow(false))\n\t\t\t\t\t\t\t\t: alert('Please enter todo.')\n\t\t\t\t\t\t}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t) : (\n\t\t\t\t<Button\n\t\t\t\t\ttype={'add'}\n\t\t\t\t\ttext={'ADD'}\n\t\t\t\t\tonBtnClick={() =>\n\t\t\t\t\t\tcontent\n\t\t\t\t\t\t\t? (addTodo(content, selectedTagIndex), onModalShow(false))\n\t\t\t\t\t\t\t: alert('Please enter todo.')\n\t\t\t\t\t}\n\t\t\t\t/>\n\t\t\t)}\n\t\t</div>\n\t);\n\n\tconst dialogOfTag = (\n\t\t<div className=\"dialog\">\n\t\t\t<IconButton text={'cancel'} onBtnClick={() => setModalType('TODO')} />\n\t\t\t<Label text={'Tag Name'} />\n\t\t\t<TextField upperCase={true} text={tagContent} onTextChange={setTagContent} />\n\t\t\t<Label text={'Tag Color'} />\n\t\t\t<div className=\"circleList\">{colorListInTagModal}</div>\n\t\t\t<Label text={'Your Tag'} />\n\t\t\t<div className=\"tagList\">{tagListInTagModal}</div>\n\t\t\t{tagAction === 'EDIT_TAG' ? (\n\t\t\t\t<div className=\"btnGroup\">\n\t\t\t\t\t<Button\n\t\t\t\t\t\ttype={'remove'}\n\t\t\t\t\t\ttext={'REMOVE'}\n\t\t\t\t\t\tonBtnClick={() => {\n\t\t\t\t\t\t\tremoveTag(selectedTagIndex);\n\t\t\t\t\t\t\tsetSelectedTagIndex(tagList.length);\n\t\t\t\t\t\t\tsetTagAction('ADD_TAG');\n\t\t\t\t\t\t\tsetTagContent('');\n\t\t\t\t\t\t\tsetSelectedColorIndex(colorList.length);\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>\n\t\t\t\t\t<Button\n\t\t\t\t\t\ttype={'save'}\n\t\t\t\t\t\ttext={'SAVE'}\n\t\t\t\t\t\tonBtnClick={() =>\n\t\t\t\t\t\t\ttagContent && colorList[selectedColorIndex]\n\t\t\t\t\t\t\t\t? editTag(selectedTagIndex, tagContent, colorList[selectedColorIndex])\n\t\t\t\t\t\t\t\t: alert('Please enter name and choose color.')\n\t\t\t\t\t\t}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t) : (\n\t\t\t\t<Button\n\t\t\t\t\ttype={'add'}\n\t\t\t\t\ttext={'ADD'}\n\t\t\t\t\tonBtnClick={() =>\n\t\t\t\t\t\ttagContent && colorList[selectedColorIndex]\n\t\t\t\t\t\t\t? (addTag(tagContent, colorList[selectedColorIndex]),\n\t\t\t\t\t\t\t\tsetSelectedTagIndex(tagList.length + 1),\n\t\t\t\t\t\t\t\tsetTagContent(''),\n\t\t\t\t\t\t\t\tsetSelectedColorIndex(colorList.length))\n\t\t\t\t\t\t\t: alert('Please enter name and choose color.')\n\t\t\t\t\t}\n\t\t\t\t/>\n\t\t\t)}\n\t\t</div>\n\t);\n\n\tconst ref = useRef();\n\n\treturn (\n\t\t<div\n\t\t\tref={ref}\n\t\t\tclassName=\"modal\"\n\t\t\tonClick={e => (e.target.contains(ref.current) ? onModalShow(false) : null)}\n\t\t>\n\t\t\t{modalType === 'TODO' ? dialogOfTodo : dialogOfTag}\n\t\t</div>\n\t);\n};\n\nconst mapStateToProps = state => {\n\treturn {\n\t\ttagList: state.tagList,\n\t\tcolorList: state.colorList,\n\t};\n};\n\nexport default connect(mapStateToProps, {\n\taddTodo,\n\tremoveTodo,\n\teditTodo,\n\taddTag,\n\tremoveTag,\n\teditTag,\n})(Modal);\n","import {\n    ADD_TODO,\n    REMOVE_TODO,\n    EDIT_TODO,\n    EDIT_TODO_DONE,\n    ADD_TAG,\n    REMOVE_TAG,\n    EDIT_TAG,\n} from './types';\n\nexport const addTodo = (content, tagIndex) => {\n    return {\n        type: ADD_TODO,\n        payload: { content, tagIndex }\n    };\n};\n\nexport const removeTodo = index => {\n    return {\n        type: REMOVE_TODO,\n        payload: { index }\n    };\n};\n\nexport const editTodo = (index, content, tagIndex) => {\n    return {\n        type: EDIT_TODO,\n        payload: { index, content, tagIndex }\n    };\n};\n\nexport const editTodoDone = index => {\n    return {\n        type: EDIT_TODO_DONE,\n        payload: { index }\n    };\n};\n\nexport const addTag = (name, color) => {\n    return {\n        type: ADD_TAG,\n        payload: { name, color }\n    };\n};\n\nexport const removeTag = index => {\n    return {\n        type: REMOVE_TAG,\n        payload: { index }\n    };\n};\n\nexport const editTag = (index, name, color) => {\n    return {\n        type: EDIT_TAG,\n        payload: { index, name, color }\n    };\n};","import React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { editTodoDone } from '../../../actions';\nimport Modal from '../../molecules/Modal';\nimport Label from '../../atoms/Label';\nimport Button from '../../atoms/Button';\nimport Tag from '../../atoms/Tag';\nimport './index.css';\n\nconst TodoList = ({ todoList, tagList, colorList, editTodoDone }) => {\n\tconst monthNames = [\n\t\t'Jan',\n\t\t'Feb',\n\t\t'Mar',\n\t\t'Apr',\n\t\t'May',\n\t\t'Jun',\n\t\t'Jul',\n\t\t'Aug',\n\t\t'Sep',\n\t\t'Oct',\n\t\t'Nov',\n\t\t'Dec',\n\t];\n\tconst date = new Date();\n\tconst formatDate = `${monthNames[date.getMonth()]}. ${date.getDate()}, ${date.getFullYear()}`;\n\n\tconst [modalSetting, setModalSetting] = useState({\n\t\tinitialType: '', // TODO or TAG\n\t\tinitialAction: '', // ADD_TODO or REMOVE_TODO or EDIT_TODO or ADD_TAG\n\t\tselectedTodoIndex: todoList.length,\n\t\tinitialContent: '',\n\t\tinitialTagIndex: tagList.length,\n\t\tinitialColorIndex: colorList.length,\n\t});\n\n\tconst [showModal, setShowModal] = useState(false);\n\n\tconst renderedList = todoList.map((todoItem, todoIndex) => {\n\t\tconst renderedTag =\n\t\t\ttagList[todoItem.tagIndex] && tagList[todoItem.tagIndex].name ? (\n\t\t\t\t<Tag\n\t\t\t\t\ttext={tagList[todoItem.tagIndex].name}\n\t\t\t\t\tstyleSetting={{\n\t\t\t\t\t\tborder: `2px solid ${tagList[todoItem.tagIndex].color}`,\n\t\t\t\t\t\tbackgroundColor: tagList[todoItem.tagIndex].color,\n\t\t\t\t\t}}\n\t\t\t\t\tonTagClick={() => { }}\n\t\t\t\t/>\n\t\t\t) : null;\n\n\t\treturn (\n\t\t\t<div\n\t\t\t\tkey={todoIndex}\n\t\t\t\tclassName=\"item\"\n\t\t\t\tonClick={e => {\n\t\t\t\t\tconst type = e.target.type || '';\n\t\t\t\t\tif (!type.includes('checkbox')) {\n\t\t\t\t\t\tsetShowModal(true);\n\t\t\t\t\t\tsetModalSetting({\n\t\t\t\t\t\t\tinitialType: 'TODO',\n\t\t\t\t\t\t\tinitialAction: 'EDIT_TODO',\n\t\t\t\t\t\t\tselectedTodoIndex: todoIndex,\n\t\t\t\t\t\t\tinitialContent: todoItem.content,\n\t\t\t\t\t\t\tinitialTagIndex: todoItem.tagIndex,\n\t\t\t\t\t\t\tinitialColorIndex: tagList[todoItem.tagIndex] ? colorList.indexOf(tagList[todoItem.tagIndex].color) : colorList.length,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<input type=\"checkbox\" onClick={() => editTodoDone(todoIndex)} />\n\t\t\t\t<span\n\t\t\t\t\tclassName=\"checkbox material-icons\"\n\t\t\t\t\tstyle={todoItem.done ? { backgroundColor: '#9CB2F3' } : null}\n\t\t\t\t>\n\t\t\t\t\t{todoItem.done ? 'done' : ''}\n\t\t\t\t</span>\n\t\t\t\t<label\n\t\t\t\t\tclassName=\"content\"\n\t\t\t\t\tstyle={todoItem.done ? { color: '#D6D6D6', textDecoration: 'line-through' } : null}\n\t\t\t\t>\n\t\t\t\t\t{todoItem.content}\n\t\t\t\t</label>\n\t\t\t\t{renderedTag}\n\t\t\t\t<span className=\"arrow material-icons\">keyboard_arrow_right</span>\n\t\t\t</div>\n\t\t);\n\t});\n\n\treturn (\n\t\t<div className=\"todo\">\n\t\t\t<div className=\"banner\">\n\t\t\t\t<h1 className=\"title\">Your Things</h1>\n\t\t\t\t<p className=\"date\">{formatDate}</p>\n\t\t\t</div>\n\t\t\t<Label text={'All Task'} />\n\t\t\t<div className=\"list\">{renderedList}</div>\n\t\t\t<div className=\"btnGroup\">\n\t\t\t\t<Button\n\t\t\t\t\ttype={'add'}\n\t\t\t\t\ttext={'ADD TODO'}\n\t\t\t\t\tonBtnClick={() => {\n\t\t\t\t\t\tsetShowModal(true);\n\t\t\t\t\t\tsetModalSetting({\n\t\t\t\t\t\t\tinitialType: 'TODO',\n\t\t\t\t\t\t\tinitialAction: 'ADD_TODO',\n\t\t\t\t\t\t\tselectedTodoIndex: todoList.length,\n\t\t\t\t\t\t\tinitialContent: '',\n\t\t\t\t\t\t\tinitialTagIndex: tagList.length,\n\t\t\t\t\t\t\tinitialColorIndex: colorList.length,\n\t\t\t\t\t\t});\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t{showModal ? <Modal modalSetting={modalSetting} onModalShow={setShowModal} /> : null}\n\t\t</div>\n\t);\n};\n\nconst mapStateToProps = state => {\n\treturn {\n\t\ttodoList: state.todoList,\n\t\ttagList: state.tagList,\n\t\tcolorList: state.colorList,\n\t};\n};\n\nexport default connect(mapStateToProps, { editTodoDone })(TodoList);\n","import React from 'react';\nimport TodoList from './organisms/TodoList';\n\nconst App = () => {\n    return <TodoList />;\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport reducers from './reducers';\nimport App from './components/App';\nimport './styles.css';\n\nReactDOM.render(\n    <Provider store={createStore(reducers)}>\n        <App />\n    </Provider>,\n    document.querySelector('#root')\n);"],"sourceRoot":""}